// <auto-generated />
using System;
using FishingHunting.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FishingHunting.Migrations
{
    [DbContext(typeof(FishingHuntingContext))]
    [Migration("20210408014050_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FishingHunting.Models.Fishing", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FishingProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FishingProductType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Fishing");
                });

            modelBuilder.Entity("FishingHunting.Models.FishingPlace", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FishingLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FishingPlaceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("FishingPlace");
                });

            modelBuilder.Entity("FishingHunting.Models.Hunting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HuntingProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HuntingProductType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Hunting");
                });

            modelBuilder.Entity("FishingHunting.Models.HuntingPlace", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HuntingLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HuntingPlaceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("HuntingPlace");
                });

            modelBuilder.Entity("FishingHunting.Models.Preferences", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FishingPlaceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FishingProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HuntingPlaceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HuntingProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("FishingPlaceID");

                    b.HasIndex("FishingProductID");

                    b.HasIndex("HuntingPlaceID");

                    b.HasIndex("HuntingProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("FishingHunting.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("FishingHunting.Models.Preferences", b =>
                {
                    b.HasOne("FishingHunting.Models.FishingPlace", "FishingPlace")
                        .WithMany("Preferences")
                        .HasForeignKey("FishingPlaceID");

                    b.HasOne("FishingHunting.Models.Fishing", "FishingProduct")
                        .WithMany("Preferences")
                        .HasForeignKey("FishingProductID");

                    b.HasOne("FishingHunting.Models.HuntingPlace", "HuntingPlace")
                        .WithMany("Preferences")
                        .HasForeignKey("HuntingPlaceID");

                    b.HasOne("FishingHunting.Models.Hunting", "HuntingProduct")
                        .WithMany("Preferences")
                        .HasForeignKey("HuntingProductID");

                    b.HasOne("FishingHunting.Models.User", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
